<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
       default-lazy-init="true">

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- MyBatis配置 -->
    <beans>
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource" />
            <!-- 自动扫描domain目录, 省掉Configuration.xml里的手工配置。PS：包名的配置文件在application里面通配了 -->
            <property name="typeAliasesPackage" value="${mybatis.basepackage}" />
            <!-- 显式指定Mapper文件位置 -->
            <property name="mapperLocations" value="classpath*:/mybatis/**/*Mapper.xml" />
        </bean>
    </beans>
    
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
    <beans>
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
            <property name="basePackage" value="com.elixir.*.dao" />
        </bean>
    </beans>
    
    <!-- 配置数据源 使用的是Druid数据源 -->
	<beans>
		<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<!-- 初始化连接大小 -->
			<property name="initialSize" value="0" />
			<!-- 连接池最大使用连接数量 -->
			<property name="maxActive" value="20" />
			<!-- 连接池最小空闲 -->
			<property name="minIdle" value="0" />
			<!-- 获取连接最大等待时间 -->
			<property name="maxWait" value="60000" />
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
			<!-- 用来检测有效sql -->
			<property name="validationQuery" value="${validationQuery}" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="testWhileIdle" value="true" />
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="25200000" />
			<!-- 打开removeAbandoned功能 -->
			<property name="removeAbandoned" value="true" />
			<!-- 1800秒，也就是30分钟 -->
			<property name="removeAbandonedTimeout" value="1800" />
			<!-- 关闭abanded连接时输出错误日志 -->
			<property name="logAbandoned" value="true" />
			<!-- 监控数据库 -->
			<property name="filters" value="mergeStat" />
		</bean>	
	</beans>	
	
</beans>